export interface AIOptimizationChecklist {
  metaTags: MetaTagsChecklist;
  openGraph: OpenGraphChecklist;
  structuredData: StructuredDataChecklist;
  aiAssistant: AIAssistantChecklist;
  coreWebVitals: CoreWebVitalsChecklist;
  contentStructure: ContentStructureChecklist;
  voiceSearch: VoiceSearchChecklist;
  technicalSEO: TechnicalSEOChecklist;
}

export interface MetaTagsChecklist {
  dynamicTitleTags: boolean;
  metaDescriptions: boolean;
  metaKeywords: boolean;
  authorAttribution: boolean;
  robotsMeta: boolean;
  languageSpecification: boolean;
  canonicalUrls: boolean;
  mobileViewport: boolean;
  characterEncoding: boolean;
  themeColor: boolean;
  applicationName: boolean;
  referrerPolicy: boolean;
  contentSecurityPolicy: boolean;
  socialImageAltText: boolean;
  geolocation: boolean;
}

export interface OpenGraphChecklist {
  completeOGProtocol: boolean;
  twitterCardImplementation: boolean;
  featuredImages: boolean;
  socialSharingButtons: boolean;
  linkedinOptimization: boolean;
  facebookOptimization: boolean;
  pinterestOptimization: boolean;
  whatsappSharing: boolean;
  instagramOptimization: boolean;
  telegramSharing: boolean;
  redditOptimization: boolean;
  youtubeMetadata: boolean;
  ampOptimization: boolean;
  webStoriesCompatibility: boolean;
  richMediaOptimization: boolean;
}

export interface StructuredDataChecklist {
  articleSchema: boolean;
  faqSchema: boolean;
  howToSchema: boolean;
  reviewSchema: boolean;
  productSchema: boolean;
  videoSchema: boolean;
  knowledgeGraph: boolean;
  organizationSchema: boolean;
  personSchema: boolean;
  breadcrumbSchema: boolean;
  websiteSchema: boolean;
  courseSchema: boolean;
  eventSchema: boolean;
  jobPostingSchema: boolean;
  localBusinessSchema: boolean;
}

export interface AIAssistantChecklist {
  contentSegmentation: boolean;
  qaFormat: boolean;
  conversationalMarkers: boolean;
  contextSignals: boolean;
  entityRecognition: boolean;
  topicModeling: boolean;
  semanticRelationships: boolean;
  naturalLanguagePatterns: boolean;
  intentClassification: boolean;
  multilingualSupport: boolean;
  semanticClustering: boolean;
  factualAccuracy: boolean;
  citationTracking: boolean;
  expertiseSignals: boolean;
  realTimeUpdates: boolean;
}

export interface CoreWebVitalsChecklist {
  loadingPerformance: boolean;
  visualStability: boolean;
  interactivityImprovement: boolean;
  fontLoadingOptimization: boolean;
  scrollBehaviorEnhancement: boolean;
  cssJsOptimization: boolean;
  imageOptimization: boolean;
  resourceHints: boolean;
  criticalResourcePrioritization: boolean;
  connectionOptimization: boolean;
  compressionOptimization: boolean;
  cacheOptimization: boolean;
}

export interface ContentStructureChecklist {
  hierarchicalHeaders: boolean;
  autoGeneratedTOC: boolean;
  readingProgressIndicators: boolean;
  semanticHTMLTags: boolean;
  microdataImplementation: boolean;
  richSnippetOptimization: boolean;
  accessibilityOptimization: boolean;
  printStylesheets: boolean;
  contentDeliveryOptimization: boolean;
  multilingualSupport: boolean;
  keywordDensityOptimization: boolean;
  userExperienceSignals: boolean;
}

export interface VoiceSearchChecklist {
  naturalLanguageStructure: boolean;
  questionTargeting: boolean;
  snippetFormatting: boolean;
  localSEOInclusion: boolean;
  conversationalOptimization: boolean;
  featuredSnippetOptimization: boolean;
  answerBoxOptimization: boolean;
  peopleAlsoAskOptimization: boolean;
  relatedQuestionsStructure: boolean;
  conversationalKeywords: boolean;
  contextualAnswers: boolean;
  smartSpeakerOptimization: boolean;
}

export interface TechnicalSEOChecklist {
  imageAltText: boolean;
  internalLinking: boolean;
  externalCitations: boolean;
  pageSpeed: boolean;
  mobileResponsiveness: boolean;
  sslHttps: boolean;
  xmlSitemap: boolean;
  robotsTxt: boolean;
  structuredURLs: boolean;
  httpStatusOptimization: boolean;
  redirectChainOptimization: boolean;
  duplicateContentPrevention: boolean;
  crawlabilityOptimization: boolean;
  indexabilityControl: boolean;
  internationalSEO: boolean;
}

export class AIOptimizer {
  private checklist: AIOptimizationChecklist;

  constructor() {
    this.checklist = this.initializeChecklist();
    this.evaluateCurrentPage();
  }

  private initializeChecklist(): AIOptimizationChecklist {
    return {
      metaTags: {
        dynamicTitleTags: false,
        metaDescriptions: false,
        metaKeywords: false,
        authorAttribution: false,
        robotsMeta: false,
        languageSpecification: false,
        canonicalUrls: false,
        mobileViewport: false,
        characterEncoding: false,
        themeColor: false,
        applicationName: false,
        referrerPolicy: false,
        contentSecurityPolicy: false,
        socialImageAltText: false,
        geolocation: false
      },
      openGraph: {
        completeOGProtocol: false,
        twitterCardImplementation: false,
        featuredImages: false,
        socialSharingButtons: false,
        linkedinOptimization: false,
        facebookOptimization: false,
        pinterestOptimization: false,
        whatsappSharing: false,
        instagramOptimization: false,
        telegramSharing: false,
        redditOptimization: false,
        youtubeMetadata: false,
        ampOptimization: false,
        webStoriesCompatibility: false,
        richMediaOptimization: false
      },
      structuredData: {
        articleSchema: false,
        faqSchema: false,
        howToSchema: false,
        reviewSchema: false,
        productSchema: false,
        videoSchema: false,
        knowledgeGraph: false,
        organizationSchema: false,
        personSchema: false,
        breadcrumbSchema: false,
        websiteSchema: false,
        courseSchema: false,
        eventSchema: false,
        jobPostingSchema: false,
        localBusinessSchema: false
      },
      aiAssistant: {
        contentSegmentation: false,
        qaFormat: false,
        conversationalMarkers: false,
        contextSignals: false,
        entityRecognition: false,
        topicModeling: false,
        semanticRelationships: false,
        naturalLanguagePatterns: false,
        intentClassification: false,
        multilingualSupport: false,
        semanticClustering: false,
        factualAccuracy: false,
        citationTracking: false,
        expertiseSignals: false,
        realTimeUpdates: false
      },
      coreWebVitals: {
        loadingPerformance: false,
        visualStability: false,
        interactivityImprovement: false,
        fontLoadingOptimization: false,
        scrollBehaviorEnhancement: false,
        cssJsOptimization: false,
        imageOptimization: false,
        resourceHints: false,
        criticalResourcePrioritization: false,
        connectionOptimization: false,
        compressionOptimization: false,
        cacheOptimization: false
      },
      contentStructure: {
        hierarchicalHeaders: false,
        autoGeneratedTOC: false,
        readingProgressIndicators: false,
        semanticHTMLTags: false,
        microdataImplementation: false,
        richSnippetOptimization: false,
        accessibilityOptimization: false,
        printStylesheets: false,
        contentDeliveryOptimization: false,
        multilingualSupport: false,
        keywordDensityOptimization: false,
        userExperienceSignals: false
      },
      voiceSearch: {
        naturalLanguageStructure: false,
        questionTargeting: false,
        snippetFormatting: false,
        localSEOInclusion: false,
        conversationalOptimization: false,
        featuredSnippetOptimization: false,
        answerBoxOptimization: false,
        peopleAlsoAskOptimization: false,
        relatedQuestionsStructure: false,
        conversationalKeywords: false,
        contextualAnswers: false,
        smartSpeakerOptimization: false
      },
      technicalSEO: {
        imageAltText: false,
        internalLinking: false,
        externalCitations: false,
        pageSpeed: false,
        mobileResponsiveness: false,
        sslHttps: false,
        xmlSitemap: false,
        robotsTxt: false,
        structuredURLs: false,
        httpStatusOptimization: false,
        redirectChainOptimization: false,
        duplicateContentPrevention: false,
        crawlabilityOptimization: false,
        indexabilityControl: false,
        internationalSEO: false
      }
    };
  }

  public optimizeContent(content: string): {
    optimizedContent: string;
    score: number;
    recommendations: string[];
  } {
    // Basic content optimization logic
    let optimizedContent = content;
    let score = 0;
    const recommendations: string[] = [];

    // Check for proper heading structure
    if (content.includes('<h1>') && content.includes('<h2>')) {
      this.checklist.contentStructure.hierarchicalHeaders = true;
      score += 10;
    } else {
      recommendations.push("Add proper heading hierarchy (H1, H2, H3)");
    }

    // Check for semantic HTML
    if (content.includes('<main>') || content.includes('<article>') || content.includes('<section>')) {
      this.checklist.contentStructure.semanticHTMLTags = true;
      score += 10;
    } else {
      recommendations.push("Use semantic HTML5 elements");
    }

    // Check for Q&A format
    if (content.includes('?') && content.toLowerCase().includes('answer')) {
      this.checklist.aiAssistant.qaFormat = true;
      score += 15;
    } else {
      recommendations.push("Structure content in Q&A format for AI engines");
    }

    // Calculate overall score (out of 100)
    const totalChecks = this.getTotalChecks();
    const completedChecks = this.getCompletedChecks();
    score = Math.round((completedChecks / totalChecks) * 100);

    return {
      optimizedContent,
      score,
      recommendations
    };
  }

  private getTotalChecks(): number {
    return Object.values(this.checklist).reduce((total, section) => {
      return total + Object.keys(section).length;
    }, 0);
  }

  private getCompletedChecks(): number {
    return Object.values(this.checklist).reduce((total, section) => {
      return total + Object.values(section).filter(check => check === true).length;
    }, 0);
  }

  public getChecklist(): AIOptimizationChecklist {
    return this.checklist;
  }

  private evaluateCurrentPage(): void {
    if (typeof window === 'undefined') return;
    
    this.evaluateMetaTags();
    this.evaluateOpenGraph();
    this.evaluateStructuredData();
    this.evaluateContentStructure();
    this.evaluateTechnicalSEO();
    this.evaluateCoreWebVitals();
    this.evaluateVoiceSearch();
    this.evaluateAIAssistant();
  }

  private evaluateMetaTags(): void {
    // Check for title tag
    this.checklist.metaTags.dynamicTitleTags = !!document.querySelector('title');
    
    // Check for meta description
    this.checklist.metaTags.metaDescriptions = !!document.querySelector('meta[name="description"]');
    
    // Check for meta keywords
    this.checklist.metaTags.metaKeywords = !!document.querySelector('meta[name="keywords"]');
    
    // Check for author attribution
    this.checklist.metaTags.authorAttribution = !!document.querySelector('meta[name="author"]');
    
    // Check for robots meta
    this.checklist.metaTags.robotsMeta = !!document.querySelector('meta[name="robots"]');
    
    // Check for language specification
    this.checklist.metaTags.languageSpecification = !!document.documentElement.lang;
    
    // Check for canonical URL
    this.checklist.metaTags.canonicalUrls = !!document.querySelector('link[rel="canonical"]');
    
    // Check for mobile viewport
    this.checklist.metaTags.mobileViewport = !!document.querySelector('meta[name="viewport"]');
    
    // Check for character encoding
    this.checklist.metaTags.characterEncoding = !!document.querySelector('meta[charset]');
    
    // Check for theme color
    this.checklist.metaTags.themeColor = !!document.querySelector('meta[name="theme-color"]');
    
    // Check for application name (PWA)
    this.checklist.metaTags.applicationName = !!document.querySelector('meta[name="application-name"]') || !!document.querySelector('meta[property="al:web:app_name"]');
    
    // Check for referrer policy
    this.checklist.metaTags.referrerPolicy = !!document.querySelector('meta[name="referrer"]');
    
    // Check for content security policy
    this.checklist.metaTags.contentSecurityPolicy = !!document.querySelector('meta[http-equiv="Content-Security-Policy"]');
    
    // Check for social image alt text
    this.checklist.metaTags.socialImageAltText = !!document.querySelector('meta[property="og:image:alt"]') || !!document.querySelector('meta[name="twitter:image:alt"]');
    
    // Check for geolocation meta
    this.checklist.metaTags.geolocation = !!document.querySelector('meta[name="geo.region"]') || !!document.querySelector('meta[name="geo.placename"]');
  }

  private evaluateOpenGraph(): void {
    // Check for complete OG protocol
    const ogTags = ['og:type', 'og:url', 'og:title', 'og:description', 'og:image'];
    this.checklist.openGraph.completeOGProtocol = ogTags.every(tag => 
      !!document.querySelector(`meta[property="${tag}"]`)
    );
    
    // Check for Twitter card implementation
    this.checklist.openGraph.twitterCardImplementation = !!document.querySelector('meta[name="twitter:card"]');
    
    // Check for featured images
    this.checklist.openGraph.featuredImages = !!document.querySelector('meta[property="og:image"]');
    
    // Check for social optimization
    this.checklist.openGraph.linkedinOptimization = !!document.querySelector('meta[property="og:type"]');
    this.checklist.openGraph.facebookOptimization = !!document.querySelector('meta[property="og:url"]');
    
    // Check for social sharing buttons
    this.checklist.openGraph.socialSharingButtons = !!document.querySelector('[data-share]') || !!document.querySelector('.social-share');
    
    // Check for Pinterest optimization
    this.checklist.openGraph.pinterestOptimization = !!document.querySelector('meta[name="pinterest-media"]') || !!document.querySelector('meta[property="pinterest:description"]');
    
    // Check for WhatsApp sharing
    this.checklist.openGraph.whatsappSharing = !!document.querySelector('meta[property="og:description"]') && !!document.querySelector('meta[property="og:image"]');
    
    // Check for Instagram optimization
    this.checklist.openGraph.instagramOptimization = !!document.querySelector('meta[property="og:image"]') && !!document.querySelector('meta[property="og:title"]');
    
    // Check for Telegram sharing
    this.checklist.openGraph.telegramSharing = !!document.querySelector('meta[property="og:url"]');
    
    // Check for Reddit optimization
    this.checklist.openGraph.redditOptimization = !!document.querySelector('meta[property="og:title"]') && !!document.querySelector('meta[property="og:description"]');
    
    // Check for YouTube metadata
    this.checklist.openGraph.youtubeMetadata = !!document.querySelector('meta[name="youtube-verify"]') || !!document.querySelector('link[rel="alternate"][type="application/rss+xml"]');
    
    // Check for AMP optimization
    this.checklist.openGraph.ampOptimization = !!document.querySelector('link[rel="amphtml"]');
    
    // Check for Web Stories compatibility
    const webStoryScript = document.querySelector('script[type="application/ld+json"]');
    const webStoryContent = webStoryScript?.textContent ?? "";
    this.checklist.openGraph.webStoriesCompatibility = !!webStoryScript && webStoryContent.includes('Story');
    
    // Check for rich media optimization
    this.checklist.openGraph.richMediaOptimization = !!document.querySelector('meta[property="og:video"]') || !!document.querySelector('meta[property="og:audio"]') || !!document.querySelector('meta[property="twitter:player"]');
  }

  private evaluateStructuredData(): void {
    const jsonLdScripts = Array.from(document.querySelectorAll('script[type="application/ld+json"]'));
    
    jsonLdScripts.forEach(script => {
      try {
        const data = JSON.parse(script.textContent || '');
        
        if (data['@type']) {
          switch (data['@type']) {
            case 'Article':
            case 'BlogPosting':
              this.checklist.structuredData.articleSchema = true;
              break;
            case 'FAQPage':
              this.checklist.structuredData.faqSchema = true;
              break;
            case 'Organization':
              this.checklist.structuredData.organizationSchema = true;
              break;
            case 'Person':
              this.checklist.structuredData.personSchema = true;
              break;
            case 'BreadcrumbList':
              this.checklist.structuredData.breadcrumbSchema = true;
              break;
            case 'HowTo':
              this.checklist.structuredData.howToSchema = true;
              break;
            case 'Review':
              this.checklist.structuredData.reviewSchema = true;
              break;
            case 'Product':
              this.checklist.structuredData.productSchema = true;
              break;
            case 'VideoObject':
              this.checklist.structuredData.videoSchema = true;
              break;
            case 'WebSite':
              this.checklist.structuredData.websiteSchema = true;
              break;
            case 'Course':
              this.checklist.structuredData.courseSchema = true;
              break;
            case 'Event':
              this.checklist.structuredData.eventSchema = true;
              break;
            case 'JobPosting':
              this.checklist.structuredData.jobPostingSchema = true;
              break;
            case 'LocalBusiness':
              this.checklist.structuredData.localBusinessSchema = true;
              break;
          }
        }
      } catch (e) {
        // Invalid JSON-LD
      }
    });
    
    // Knowledge graph (simplified check)
    this.checklist.structuredData.knowledgeGraph = 
      this.checklist.structuredData.organizationSchema && 
      this.checklist.structuredData.personSchema;
  }

  private evaluateContentStructure(): void {
    // Check for hierarchical headers
    const h1 = document.querySelector('h1');
    const h2 = document.querySelector('h2');
    this.checklist.contentStructure.hierarchicalHeaders = !!(h1 && h2);
    
    // Check for semantic HTML tags
    const semanticTags = ['main', 'article', 'section', 'nav', 'aside', 'header', 'footer'];
    this.checklist.contentStructure.semanticHTMLTags = semanticTags.some(tag => 
      !!document.querySelector(tag)
    );
    
    // Check for microdata
    this.checklist.contentStructure.microdataImplementation = !!document.querySelector('[itemscope]');
    
    // Check for accessibility optimization
    this.checklist.contentStructure.accessibilityOptimization = !!document.querySelector('[role]') || !!document.querySelector('[aria-label]') || !!document.querySelector('[alt]');
    
    // Check for print stylesheets
    this.checklist.contentStructure.printStylesheets = !!document.querySelector('link[media*="print"]');
    
    // Check for content delivery optimization
    this.checklist.contentStructure.contentDeliveryOptimization = !!document.querySelector('link[rel="preload"]') || !!document.querySelector('script[async]');
    
    // Check for multilingual support
    this.checklist.contentStructure.multilingualSupport = !!document.querySelector('[hreflang]') || document.documentElement.lang !== 'en';
    
    // Check for keyword density optimization (reasonable content length)
    this.checklist.contentStructure.keywordDensityOptimization = (document.body.textContent || '').length > 1000;
    
    // Check for user experience signals
    this.checklist.contentStructure.userExperienceSignals = !!document.querySelector('button') || !!document.querySelector('input') || !!document.querySelector('form');
    
    // Enhanced checks
    this.checklist.contentStructure.autoGeneratedTOC = !!document.querySelector('nav[role="navigation"] ul') || !!document.querySelector('.toc');
    this.checklist.contentStructure.readingProgressIndicators = !!document.querySelector('.progress') || !!document.querySelector('[data-progress]');
    this.checklist.contentStructure.richSnippetOptimization = 
      this.checklist.structuredData.articleSchema || this.checklist.structuredData.faqSchema;
  }

  private evaluateTechnicalSEO(): void {
    // Check for image alt text
    const images = Array.from(document.querySelectorAll('img'));
    this.checklist.technicalSEO.imageAltText = images.length === 0 || 
      images.every(img => img.getAttribute('alt') !== null);
    
    // Check for HTTPS
    this.checklist.technicalSEO.sslHttps = window.location.protocol === 'https:';
    
    // Check for mobile responsiveness (basic viewport check)
    this.checklist.technicalSEO.mobileResponsiveness = !!document.querySelector('meta[name="viewport"]');
    
    // Check for structured URLs
    this.checklist.technicalSEO.structuredURLs = !window.location.pathname.includes('?') && window.location.pathname.split('/').length > 2;
    
    // Check for HTTP status optimization
    this.checklist.technicalSEO.httpStatusOptimization = !document.querySelector('meta[http-equiv="refresh"]');
    
    // Check for redirect chain optimization
    this.checklist.technicalSEO.redirectChainOptimization = !window.location.href.includes('#!');
    
    // Check for duplicate content prevention
    this.checklist.technicalSEO.duplicateContentPrevention = !!document.querySelector('link[rel="canonical"]');
    
    // Check for crawlability optimization
    this.checklist.technicalSEO.crawlabilityOptimization = !document.querySelector('meta[name="robots"][content*="noindex"]');
    
    // Check for indexability control
    this.checklist.technicalSEO.indexabilityControl = !!document.querySelector('meta[name="robots"]');
    
    // Check for international SEO
    this.checklist.technicalSEO.internationalSEO = !!document.querySelector('link[rel="alternate"][hreflang]') || !!document.documentElement.lang;
    
    // Enhanced checks
    this.checklist.technicalSEO.internalLinking = document.querySelectorAll('a[href^="/"], a[href^="."]').length > 0;
    this.checklist.technicalSEO.externalCitations = document.querySelectorAll('a[href^="http"]').length > 0;
    const navigationEntry = performance.getEntriesByType('navigation')[0] as PerformanceNavigationTiming | undefined;
    if (navigationEntry) {
      this.checklist.technicalSEO.pageSpeed = navigationEntry.loadEventEnd - navigationEntry.startTime < 3000;
    } else if (performance.timing) {
      const { loadEventEnd, navigationStart } = performance.timing;
      this.checklist.technicalSEO.pageSpeed = loadEventEnd > 0 && navigationStart > 0 ? loadEventEnd - navigationStart < 3000 : true;
    } else {
      this.checklist.technicalSEO.pageSpeed = true;
    }
    this.checklist.technicalSEO.xmlSitemap = true; // Assume present for demonstration
    this.checklist.technicalSEO.robotsTxt = true; // Assume present for demonstration
  }

  private evaluateCoreWebVitals(): void {
    // Check for font loading optimization
    this.checklist.coreWebVitals.fontLoadingOptimization = 
      !!document.querySelector('link[rel="preconnect"][href*="fonts"]');
    
    // Check for CSS/JS optimization hints
    this.checklist.coreWebVitals.cssJsOptimization = 
      !!document.querySelector('link[rel="preload"]') || 
      !!document.querySelector('script[defer]') || 
      !!document.querySelector('script[async]');
    
    // Check for image optimization
    this.checklist.coreWebVitals.imageOptimization = Array.from(document.querySelectorAll('img')).some(img => 
      img.getAttribute('loading') === 'lazy' || img.getAttribute('decoding') === 'async'
    );
    
    // Check for resource hints
    this.checklist.coreWebVitals.resourceHints = !!document.querySelector('link[rel="preload"], link[rel="prefetch"], link[rel="dns-prefetch"]');
    
    // Check for critical resource prioritization
    this.checklist.coreWebVitals.criticalResourcePrioritization = !!document.querySelector('link[rel="preload"][as="style"]');
    
    // Check for connection optimization
    this.checklist.coreWebVitals.connectionOptimization = !!document.querySelector('link[rel="preconnect"]');
    
    // Check for compression optimization hints
    this.checklist.coreWebVitals.compressionOptimization = !!document.querySelector('meta[http-equiv="Content-Encoding"]');
    
    // Check for cache optimization
    this.checklist.coreWebVitals.cacheOptimization = !!document.querySelector('meta[http-equiv="Cache-Control"]');
    
    // Performance measurements (simplified checks)
    this.checklist.coreWebVitals.loadingPerformance = document.readyState === 'complete';
    this.checklist.coreWebVitals.visualStability = !document.querySelector('[style*="position: absolute"]');
    this.checklist.coreWebVitals.interactivityImprovement = document.querySelectorAll('script[defer], script[async]').length > 0;
    this.checklist.coreWebVitals.scrollBehaviorEnhancement = !!document.querySelector('[style*="scroll-behavior"]');
  }

  private evaluateVoiceSearch(): void {
    const content = document.body.textContent || '';
    
    // Check for question targeting
    this.checklist.voiceSearch.questionTargeting = /\b(how|what|why|when|where|who)\b/gi.test(content);
    
    // Check for natural language structure
    this.checklist.voiceSearch.naturalLanguageStructure = /\b(because|therefore|however|additionally)\b/gi.test(content);
    
    // Check for conversational optimization
    this.checklist.voiceSearch.conversationalOptimization = content.includes('?');
    
    // Check for featured snippet optimization
    this.checklist.voiceSearch.featuredSnippetOptimization = /\b(what is|how to|why|when|where)\b.*\?/gi.test(content) && content.length > 200;
    
    // Check for answer box optimization
    this.checklist.voiceSearch.answerBoxOptimization = /\b(definition|meaning|purpose)\b/gi.test(content);
    
    // Check for people also ask optimization
    this.checklist.voiceSearch.peopleAlsoAskOptimization = document.querySelectorAll('h2, h3').length > 2 && content.includes('?');
    
    // Check for related questions structure
    this.checklist.voiceSearch.relatedQuestionsStructure = /\b(related|similar|also|additionally)\b/gi.test(content) && content.includes('?');
    
    // Check for conversational keywords
    this.checklist.voiceSearch.conversationalKeywords = /\b(tell me|show me|help me|I want|I need)\b/gi.test(content);
    
    // Check for contextual answers
    this.checklist.voiceSearch.contextualAnswers = /\b(because|since|due to|as a result)\b/gi.test(content);
    
    // Check for smart speaker optimization
    this.checklist.voiceSearch.smartSpeakerOptimization = /\b(listen|hear|spoken|voice|audio)\b/gi.test(content);
    
    // Enhanced checks
    this.checklist.voiceSearch.snippetFormatting = this.checklist.structuredData.faqSchema;
    this.checklist.voiceSearch.localSEOInclusion = !!document.querySelector('meta[property="business:hours"]') || /\b(location|address|hours|phone)\b/gi.test(content);
  }

  private evaluateAIAssistant(): void {
    const content = document.body.textContent || '';
    
    // Check for Q&A format
    this.checklist.aiAssistant.qaFormat = content.includes('?') && 
      content.toLowerCase().includes('answer');
    
    // Check for conversational markers
    this.checklist.aiAssistant.conversationalMarkers = 
      /\b(for example|to illustrate|to summarize|additionally)\b/gi.test(content);
    
    // Check for natural language patterns
    this.checklist.aiAssistant.naturalLanguagePatterns = 
      /\b(how to|step by step|guide|tutorial)\b/gi.test(content);
    
    // Check for context signals
    this.checklist.aiAssistant.contextSignals = 
      this.checklist.structuredData.organizationSchema && 
      this.checklist.structuredData.articleSchema;
    
    // Check for content segmentation
    this.checklist.aiAssistant.contentSegmentation = !!document.querySelector('section');
    
    // Check for intent classification (structured content with clear purpose)
    this.checklist.aiAssistant.intentClassification = !!document.querySelector('[data-intent]') || /\b(learn|buy|compare|contact)\b/gi.test(content);
    
    // Check for multilingual support
    this.checklist.aiAssistant.multilingualSupport = !!document.querySelector('[hreflang]') || !!document.querySelector('[lang]');
    
    // Check for semantic clustering (related content grouping)
    this.checklist.aiAssistant.semanticClustering = document.querySelectorAll('section').length > 2;
    
    // Check for factual accuracy indicators
    this.checklist.aiAssistant.factualAccuracy = /\b(research|study|data|statistics|source)\b/gi.test(content);
    
    // Check for citation tracking
    this.checklist.aiAssistant.citationTracking = !!document.querySelector('cite') || /\[(\d+)\]/g.test(content);
    
    // Check for expertise signals
    this.checklist.aiAssistant.expertiseSignals = /\b(expert|certified|professional|years? of experience)\b/gi.test(content);
    
    // Check for real-time updates indicators
    this.checklist.aiAssistant.realTimeUpdates = !!document.querySelector('[data-updated]') || /\b(updated|latest|current)\b/gi.test(content);
    
    // Legacy checks
    this.checklist.aiAssistant.entityRecognition = /\b(company|person|place|product|service)\b/gi.test(content);
    this.checklist.aiAssistant.topicModeling = document.querySelectorAll('h2, h3').length > 3;
    this.checklist.aiAssistant.semanticRelationships = !!document.querySelector('[rel="related"]') || document.querySelectorAll('a[href^="/"]').length > 5;
  }

  public refreshChecklist(): AIOptimizationChecklist {
    this.evaluateCurrentPage();
    return this.checklist;
  }

  public generateMetaTags(title: string, description: string, keywords: string[]): string {
    const baseUrl = typeof window !== 'undefined' 
      ? window.location.origin
      : (process.env.NODE_ENV === 'production' 
        ? 'https://aiseooptimizer.pro' 
        : 'http://localhost:5000');

    return `
    <title>${title}</title>
    <meta name="description" content="${description}" />
    <meta name="keywords" content="${keywords.join(', ')}" />
    <meta name="robots" content="index,follow" />
    <meta name="author" content="AI SEO Optimizer Team" />
    <meta name="theme-color" content="#3b59f5" />
    <link rel="canonical" href="${baseUrl}/" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content="${baseUrl}/" />
    <meta property="og:title" content="${title}" />
    <meta property="og:description" content="${description}" />
    <meta property="og:image" content="https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=630" />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:site_name" content="AI SEO Optimizer Pro" />
    <meta property="og:locale" content="en_US" />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@aiseooptimizer" />
    <meta name="twitter:url" content="${baseUrl}/" />
    <meta name="twitter:title" content="${title}" />
    <meta name="twitter:description" content="${description}" />
    <meta name="twitter:image" content="https://images.unsplash.com/photo-1460925895917-afdab827c52f?ixlib=rb-4.0.3&auto=format&fit=crop&w=1200&h=630" />
    `;
  }
}
